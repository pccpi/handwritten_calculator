# app.py
# --------------------------------------------
# Streamlit-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
# –¢—Ä–∏ –∫–∞–Ω–≤–∞—Å–∞ –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.
# –¶–∏—Ñ—Ä—ã ‚Üí –ë–ï–õ–û–ï –ø–æ –ß–Å–†–ù–û–ú–£ (MNIST-—Å—Ç–∏–ª—å, 28x28)
# –û–ø–µ—Ä–∞—Ç–æ—Ä ‚Üí –ß–Å–†–ù–û–ï –ø–æ –ë–ï–õ–û–ú–£ (RGB, 100x100)
# –ü—É—Å—Ç—ã–µ —Ö–æ–ª—Å—Ç—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è.
# --------------------------------------------

import streamlit as st
from ui_components import three_canvases, sidebar_settings, results_block, help_block, topbar
from inference import load_models_cached, predict_all
from preprocessing import pil_from_canvas, has_ink
from labels import DEFAULT_OPERATOR_LABELS

st.set_page_config(page_title="–†—É–∫–æ–ø–∏—Å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", page_icon="üñäÔ∏è", layout="wide")
topbar()

# --- Sidebar / settings (–¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –º–µ—Ç–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –±–µ—Ä—ë–º –∏–∑ labels.py)
settings = sidebar_settings(default_operator_labels=",".join(DEFAULT_OPERATOR_LABELS))

# --- –¢—Ä–∏ –∫–∞–Ω–≤–∞—Å–∞ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞/–ø–µ—Ä–∞)
c_a, c_op, c_b = three_canvases(
    bg_color=settings.bg_color,
    stroke_color=settings.stroke_color,
    stroke_width=settings.stroke_width
)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π (–∫—ç—à–∏—Ä—É–µ—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã)
digits_model, symbols_model, load_errors = load_models_cached(
    settings.digits_model_path, settings.symbols_model_path
)
for err in load_errors:
    st.error(err)

# --- –ö–Ω–æ–ø–∫–∏
col1, col2 = st.columns(2)
with col1:
    do_predict = st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", use_container_width=True)
with col2:
    if st.button("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", use_container_width=True):
        st.experimental_rerun()

ready = (digits_model is not None) and (symbols_model is not None)

# --- –õ–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
# - –õ–∏–±–æ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É,
# - –õ–∏–±–æ –≤–∫–ª—é—á—ë–Ω "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–∞ –ª–µ—Ç—É" –∏ —á—Ç–æ-—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–æ.
something_drawn = any([
    c_a.image_data is not None,
    c_op.image_data is not None,
    c_b.image_data is not None
])
should_run = ready and (do_predict or (settings.realtime and something_drawn))

if should_run:
    # –î–æ—Å—Ç–∞—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–≤–∞—Å–æ–≤
    img_a = pil_from_canvas(c_a.image_data)
    img_op = pil_from_canvas(c_op.image_data)
    img_b = pil_from_canvas(c_b.image_data)

    # –§–∏–ª—å—Ç—Ä –ø—É—Å—Ç—ã—Ö —Ö–æ–ª—Å—Ç–æ–≤ (–∏–Ω–∞—á–µ –º–æ–¥–µ–ª—å "—É–≥–∞–¥—ã–≤–∞–µ—Ç" –ª—é–±–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –≤—Ä–æ–¥–µ 6/9/5/0)
    ink_a = has_ink(img_a)
    ink_op = has_ink(img_op)
    ink_b = has_ink(img_b)

    if not (ink_a and ink_op and ink_b):
        missing = []
        if not ink_a: missing.append("A")
        if not ink_op: missing.append("–æ–ø–µ—Ä–∞—Ç–æ—Ä")
        if not ink_b: missing.append("B")
        st.info("–ù–∞—Ä–∏—Å—É–π—Ç–µ: " + ", ".join(missing) + ". –ü—É—Å—Ç—ã–µ –ø–æ–ª—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è.")
    else:
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è + –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
        pred = predict_all(
            img_a=img_a,
            img_op=img_op,
            img_b=img_b,
            digits_model=digits_model,
            symbols_model=symbols_model,
            operator_labels=settings.operator_labels  # –Ω–∞–ø—Ä–∏–º–µ—Ä ['+', '/', '*', '-']
        )
        results_block(pred)

else:
    if ready:
        st.info("–ù–∞—Ä–∏—Å—É–π—Ç–µ —á–∏—Å–ª–æ A, –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏ —á–∏—Å–ª–æ B. –ù–∞–∂–º–∏—Ç–µ ¬´–†–∞—Å—Å—á–∏—Ç–∞—Ç—å¬ª –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ ‚Äò–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–∞ –ª–µ—Ç—É‚Äô.")
    else:
        st.warning("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ –∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª—ã —Ä—è–¥–æ–º —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.")

# --- –°–ø—Ä–∞–≤–∫–∞
help_block()